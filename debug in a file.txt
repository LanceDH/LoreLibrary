
local _MemHistory = {}
local _CPUHistory = {};
local _updateTimer = 0
local _MemMaxHistory = 200;
local function debug_updatext()
	
	UpdateAddOnMemoryUsage();
	
	local _Mem = round(GetAddOnMemoryUsage(_addonName), 1)
	ResetCPUUsage();
	UpdateAddOnCPUUsage();
	local cpu = GetAddOnCPUUsage(_addonName)
	-- if (_Mem > _MemMax) then
		-- _MemMax = _Mem;
	-- end
	-- if (_Mem < _MemMin) then
		-- _MemMin = _Mem;
	-- end
	
	if (#_MemHistory >= _MemMaxHistory) then
		table.remove(_MemHistory, 1);
	end
	table.insert(_MemHistory, _Mem);
	if (#_CPUHistory >= _MemMaxHistory) then
		table.remove(_CPUHistory, 1);
	end
	table.insert(_CPUHistory, cpu);
	
	

	local prevheight = 0;
	local div = 10;
	for k, v in ipairs(_MemHistory) do
		WH_Debug.memHistory[k]:SetPoint("BOTTOM", WH_Debug.historyBG, "BOTTOM", 0, 5 + v/div);
		WH_Debug.memHistory[k]:Show();
		WH_Debug.memHistory[k]:SetHeight(1);
		if (prevheight > round(v/div, 0)) then
			WH_Debug.memHistory[k]:SetHeight((prevheight - round(v/div, 0) > 1 and prevheight - round(v/div, 0) or 1));
		elseif (k>1 and prevheight < round(v/div, 0)) then
			WH_Debug.memHistory[k]:SetPoint("BOTTOM", WH_Debug.historyBG, "BOTTOM", 0, 5 + prevheight);
			WH_Debug.memHistory[k]:SetHeight((round(v/div, 0) - prevheight > 1 and round(v/div, 0) - prevheight or 1));
		end
		prevheight = round(v/div, 0);
		--WH_Debug.memHistory[k]:SetHeight(v/10);
	end
	
	prevheight = 0;
	div = 0.0001;
	for k, v in ipairs(_CPUHistory) do
		WH_Debug.cpuHistory[k]:SetPoint("BOTTOM", WH_Debug.historyBG, "BOTTOM", 0, 5 + v/div);
		WH_Debug.cpuHistory[k]:Show();
		WH_Debug.cpuHistory[k]:SetHeight(1);
		if (prevheight > round(v/div, 0)) then
			WH_Debug.cpuHistory[k]:SetHeight((prevheight - round(v/div, 0) > 1 and prevheight - round(v/div, 0) or 1));
		elseif (k>1 and prevheight < round(v/div, 0)) then
			WH_Debug.cpuHistory[k]:SetPoint("BOTTOM", WH_Debug.historyBG, "BOTTOM", 0, 5 + prevheight);
			WH_Debug.cpuHistory[k]:SetHeight((round(v/div, 0) - prevheight > 1 and round(v/div, 0) - prevheight or 1));
		end
		prevheight = round(v/div, 0);
		--WH_Debug.memHistory[k]:SetHeight(v/10);
	end

	local debugText = {};
	debugText[1] = "Mem: " .. _Mem;
	debugText[2] = "CPU: " .. cpu;
	-- debugText[3] = "Bullets: " .. #WH_GameFrame.dots .. " (" .. countInactiveBullets() ..")";
	-- debugText[4] = "Enemy: " .. #WH_GameFrame.enemies .. " (" .. countInactiveEnemies() ..")";
	-- debugText[5] = "Mouse: " .. (_InPlayfield and "in" or "out");
	
	WH_Debug.text:SetText(table.concat(debugText, "\n"));
	
	_LastMemory = _Mem;
end

local function DebugToggleLockbutton() 
	if WH_Debug:IsMouseEnabled() then
		WH_Debug_MoveButton.tex:SetVertexColor(DEFAULT_LOCKVERTEX_OFF, DEFAULT_LOCKVERTEX_OFF, DEFAULT_LOCKVERTEX_OFF )
		PlaySound("igMainMenuOptionCheckBoxOff");
		WH_Debug:EnableMouse(false)
	else	
		WH_Debug_MoveButton.tex:SetVertexColor(DEFAULT_LOCKVERTEX_ON, DEFAULT_LOCKVERTEX_ON, DEFAULT_LOCKVERTEX_ON )
		PlaySound("igMainMenuOptionCheckBoxOn");
		WH_Debug:EnableMouse(true)
	end
		UpdateMainFrameBG()
end

function _addon:ILWCreateDebugThingy()
local L_WH_Debug = CreateFrame("frame", "WH_Debug", UIParent)

WH_Debug:EnableMouse(true)
WH_Debug:SetFrameLevel(5)
WH_Debug:SetMovable(true)
WH_Debug:SetPoint("Center", 250, 0)
WH_Debug:RegisterForDrag("LeftButton")
WH_Debug:SetScript("OnDragStart", WH_Debug.StartMoving )
WH_Debug:SetScript("OnDragStop", WH_Debug.StopMovingOrSizing)
WH_Debug.text = WH_Debug:CreateFontString(nil, nil, "GameFontNormal")
WH_Debug.text:SetPoint("topleft", 10, 0)
WH_Debug.text:SetJustifyH("left")
local debugWidth = 200;
WH_Debug:SetWidth(debugWidth)
WH_Debug:SetHeight(200)
WH_Debug:SetClampedToScreen(true)
WH_Debug:SetScript("OnUpdate", function(self,elapsed) 
	_updateTimer = _updateTimer + elapsed
	if _updateTimer >= 0.3 then
		debug_updatext()
		_updateTimer = 0
	end
	end)
WH_Debug:Show()

WH_Debug.historyBG = WH_Debug:CreateTexture(nil, "BACKGROUND");
WH_Debug.historyBG:SetPoint("TOPLEFT", WH_Debug, "TOPLEFT", 0, 5);
WH_Debug.historyBG:SetSize(debugWidth, 10*30);
WH_Debug.historyBG:SetTexture(0, 0, 0);
WH_Debug.historyBG:Show();

WH_Debug.memHistory = {}
WH_Debug.cpuHistory = {}

local historywidth = debugWidth/_MemMaxHistory;

-- for i=0, _MemMaxHistory-1 do
	-- local temp = WH_Debug:CreateTexture(nil, "OVERLAY");
	-- temp:SetPoint("BOTTOMLEFT", WH_Debug, "TOPLEFT", historywidth * i, 5);
	-- temp:SetSize(historywidth-1, 1);
	-- temp:SetTexture(1, 1, 1);
	-- temp:Show();
	-- table.insert(WH_Debug.memHistory, temp);
-- end

for i=0, _MemMaxHistory-1 do
	local temp = WH_Debug:CreateTexture(nil, "OVERLAY");
	temp:SetPoint("LEFT", WH_Debug.historyBG, "LEFT", historywidth * i, 0);
	temp:SetPoint("BOTTOM", WH_Debug.historyBG, "BOTTOM", 0, 5);
	temp:SetSize(historywidth, 1);
	temp:SetTexture(0.9, 0.75, 0);
	temp:Hide();
	table.insert(WH_Debug.memHistory, temp);
end

for i=0, _MemMaxHistory-1 do
	local temp = WH_Debug:CreateTexture(nil, "OVERLAY");
	temp:SetPoint("LEFT", WH_Debug.historyBG, "LEFT", historywidth * i, 0);
	temp:SetPoint("BOTTOM", WH_Debug.historyBG, "BOTTOM", 0, 5);
	temp:SetSize(historywidth, 1);
	temp:SetTexture(0.7, 0.9, 0);
	temp:Hide();
	table.insert(WH_Debug.cpuHistory, temp);
end

WH_Debug.memHeights = {}

for i=0, 30 do
	local temp = WH_Debug:CreateTexture(nil, "ARTWORK");
	temp:SetPoint("BOTTOMLEFT", WH_Debug.historyBG, "BOTTOMLEFT", 0, i*10);
	temp:SetSize(debugWidth, 1);
	temp:SetTexture(0.1, 0.1, 0.1);
	if (i%5 == 0) then
		temp:SetTexture(0.2, 0.2, 0.2);
	end
	temp:Show();
	table.insert(WH_Debug.memHistory, temp);
end




local L_WH_Debug_MoveButton = CreateFrame("Button", "WH_Debug_MoveButton", WH_Debug)
WH_Debug_MoveButton:SetWidth(8)
WH_Debug_MoveButton:SetHeight(8)
WH_Debug_MoveButton:SetPoint("topright", WH_Debug, "topright", -5, -5)
WH_Debug_MoveButton:Show()
WH_Debug_MoveButton.tex = WH_Debug_MoveButton:CreateTexture("WH_Debug_MoveButton_Tex")
WH_Debug_MoveButton.tex:SetTexture("Interface\\COMMON\\UI-ModelControlPanel")
WH_Debug_MoveButton.tex:SetPoint("center", WH_Debug_MoveButton)
WH_Debug_MoveButton.tex:SetTexCoord(18/64, 36/64, 37/128, 53/128)
WH_Debug_MoveButton.tex:SetSize(8,8)
WH_Debug_MoveButton.tex:SetVertexColor(.8, .8, .8 )

 

WH_Debug_MoveButton:SetScript("OnClick",  function() 
	DebugToggleLockbutton()
	
end)
WH_Debug_MoveButton:SetScript("OnEnter",  function() 
	WH_Debug_MoveButton.tex:SetVertexColor(1, 1, 1 )
	
end)
end